#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W  &kp E      &kp R    &kp T                                                   &kp Y              &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S  &lt 5 D    &lt 2 F  &kp G             &kp LS(LG(S))      &mo 5              &kp H              &kp J  &lt 5 K    &kp L    &lt 1 MINUS
&mt LEFT_SHIFT Z  &kp X  &kp C      &kp V    &kp B             &mo 4              &kp ENTER          &kp N              &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp ESC           &none  &lt 2 TAB  &mo 1    &kp LEFT_COMMAND  &kp SPACE          &kp RIGHT_CONTROL  &kp RIGHT_COMMAND                             &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans          &kp LANGUAGE_2  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9                            &none          &kp RC(A)       &kp UP_ARROW    &kp RC(K)        &trans
&kp LANGUAGE_1  &trans          &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans            &trans  &kp DEL        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp ENTER
&kp LEFT_SHIFT  &trans          &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_0      &trans  &kp BACKSPACE  &kp PLUS        &kp KP_MINUS    &kp ASTERISK     &mt RIGHT_SHIFT SLASH
&trans          &trans          &trans        &trans        &trans        &trans            &trans  &trans                                                          &trans
            >;
        };

        NUM {
            bindings = <
&none           &kp F12  &kp F7  &kp F8  &kp F9                      &none   &kp MINUS             &kp EQUAL              &kp BACKSLASH     &kp GRAVE
&kp LEFT_SHIFT  &kp F11  &kp F4  &kp F5  &kp F6  &trans      &trans  &none   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp LEFT_SHIFT  &kp F10  &kp F1  &kp F2  &kp F3  &trans      &trans  &none   &kp LESS_THAN         &kp GREATER_THAN       &kp SEMICOLON     &kp SINGLE_QUOTE
&trans          &trans   &trans  &trans  &trans  &trans      &trans  &trans                                                                 &trans
            >;
        };

        ARROW {
            bindings = <
&none   &none           &kp UP_ARROW    &none            &trans                      &none                      &kp RC(RA(E))           &kp RC(RA(ENTER))       &kp RA(RC(T))            &none
&none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none   &trans      &trans  &kp RG(RS(LEFT_BRACKET))   &kp RC(RA(LEFT_ARROW))  &kp RA(RC(UP_ARROW))    &kp RA(RC(RIGHT_ARROW))  &none
&none   &none           &trans          &none            &trans  &trans      &trans  &kp RS(RG(RIGHT_BRACKET))  &kp RC(RA(D))           &kp RA(RC(DOWN_ARROW))  &kp RA(RC(G))            &none
&trans  &trans          &trans          &trans           &trans  &trans      &trans  &trans                                                                                              &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans                     &kp RC(RA(E))           &kp RC(RA(ENTER))       &kp RC(RA(T))            &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp RS(RG(LEFT_BRACKET))   &kp RC(RA(LEFT_ARROW))  &kp RC(RA(UP_ARROW))    &kp RC(RA(RIGHT_ARROW))  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp RS(RG(RIGHT_BRACKET))  &kp RC(RA(D))           &kp RC(RA(DOWN_ARROW))  &kp RC(RA(G))            &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                                              &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
